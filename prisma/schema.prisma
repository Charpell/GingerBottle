// 1
datasource db {
  provider = "postgresql" 
  url      = "postgres://lxzaqggodzvohe:550e58b1ec8de10a3bfe24a01fc129b62b57f75c61da3210fde6a334bdb86c9e@ec2-184-73-249-9.compute-1.amazonaws.com:5432/d9fsnanvdf8atv"
}

// 2
generator client {
  provider = "prisma-client-js"
}

// 3
model Link {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  url         String
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
  votes       Vote[]
}

model User {
  id       Int    @id @default(autoincrement())
  firstname     String?
  lastname  String?
  email    String @unique
  password String
  links    Link[]
  votes    Vote[]
  food     Food[]
  wallet  Wallet[]
  profile  String
  phone    String?
  whatsapp String?
  role  Role  @default(USER)
  seller Boolean @default(false)
  location Location? @relation(fields: [locationId], references: [id])
  locationId Int?
}

model Food {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  name String
  profile String 
  price  String 
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  location Location? @relation(fields: [locationId], references: [id])
  locationId Int?
  liters Int @default(2)
  variant Variant[]
  delivery Boolean @default(true)
  video String?
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
  extendProfile Json?
}

model Location {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  country String 
  city String @unique
  currency String 
  language Language[]
  food Food []
  user User []
}

model Variant {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  name String
  description String 
  profile String
  liters Int 
  price String
  video String?
  food    Food?     @relation(fields: [foodId], references: [id])
  foodId  Int?
  postedBy User? @relation(fields: [postedById], references: [id])
  postedById Int?
  order Order [] 
}

model Wallet {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  accountNumber String @unique 
  balance Float @default(0)
  postedBy User? @relation(fields: [postedById], references: [id])
  postedById Int?
  currency Currency
  name String 
  walletTransaction WalletTransaction []
  color String
}

model WalletTransaction {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  operation Operation
  amount Int 
  balance Int 
  accountNumber String 
  name String
  wallet Wallet? @relation(fields: [walletId], references: [id])
  walletId Int?
}

model Category {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  name String @unique
  profile String 
  food Food []
}

model Order {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  delivery String?
  time Int?
  status Status
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
  variant Variant? @relation(fields: [variantId], references: [id])
  variantId Int?
}

model Vote {
  id     Int  @id @default(autoincrement())
  link   Link @relation(fields: [linkId], references: [id])
  linkId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([linkId, userId])
}

enum Role {
  USER
  ADMIN
}

enum Protein {
  BEEF 
  CHICKEN
}

enum Status {
  UNPAID
  PENDING 
  PROGRESS 
  COMPLETED
  DELIVERED
  CANCELLED
}

enum Language {
  ENGLISH 
  FRENCH 
  GERMANY
}

enum Currency {
  NGN 
  GHC
  USD 
  GBP
}

enum Operation {
  DEPOSIT 
  WITHDRAWAL
  TRANSFER 
}