// 1
datasource db {
  provider = "postgresql" 
  url = "***"
}

// 2
generator client {
  provider = "prisma-client-js"
}

// 3
model Link {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  url         String
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
  votes       Vote[]
}

model User {
  id       Int    @id @default(autoincrement())
  firstname     String?
  lastname  String?
  email    String @unique
  password String
  links    Link[]
  votes    Vote[]
  food     Food[]
  profile  String
  phone    String?
  whatsapp String?
  role  Role  @default(USER)
  seller Boolean @default(false)
}

model Food {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String
  name String
  profile String 
  profiles String[]
  price  String 
  discountprice   String
  category Int[]
  liters Int @default(2)
  order Order[]
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
}

model Order {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  description String?
  protein Protein
  liters Int
  price String
  time Int?
  status Status
  postedBy    User?     @relation(fields: [postedById], references: [id])
  postedById  Int?
  food    Food?     @relation(fields: [foodId], references: [id])
  foodId  Int?
}

model Vote {
  id     Int  @id @default(autoincrement())
  link   Link @relation(fields: [linkId], references: [id])
  linkId Int
  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([linkId, userId])
}

enum Role {
  USER
  ADMIN
}

enum Protein {
  BEEF 
  CHICKEN
}

enum Status {
  PENDING 
  PROGRESS 
  COMPLETED
  DELIVERED
  CANCELLED
}