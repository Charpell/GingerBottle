type Query {
  info: String!
  feed(filter: String, skip: Int, take: Int, orderBy: LinkOrderByInput): Feed!
  getCategory(filter: String, skip: Int, take: Int, orderBy: CategoryOrderByInput): CategoryFeed!
  getLocation(filter: String, skip: Int, take: Int, orderBy: LocationOrderByInput): LocationFeed!
  getUserFood(userId: ID!, skip: Int, take: Int, orderBy: FoodOrderByInput): FoodFeed!
  getFood(filter: String, location: ID!, category: ID, skip: Int, take: Int, orderBy: FoodOrderByInput): FoodFeed!
  getUser(userId: ID!): User
  getUserWallet: WalletFeed
}

type Feed {
  links: [Link!]!
  count: Int!
}

type WalletFeed {
  count: Int! 
  wallet: [Wallet]
}

type CategoryFeed {
  categories: [Category]
  count: Int!
}

type LocationFeed {
  locations: [Location]
  count: Int!
}

type FoodFeed {
  food: [Food]
  count: Int!
}



type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, firstname: String!, lastname: String!, phone: String!, whatsapp: String, profile: String): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
  deletePost(id: ID!): Link!
  updateUser(email: String): User!
  deleteUser(id: ID!): User!
  createFood(name: String!, description: String!, profile: String!,  price: String, liters: Int, category: ID!, location: ID!): Food
  createCategory(name: String!, description: String!, profile: String!): Category
  createLocation(country: String!, city: String!, currency: String!): Location
  updateFood(name: String, description: String, profile: String, price: String, liters: Int, foodId: ID!): Food
  createVariant(name: String!, description: String!, profile: String!,  price: String, liters: Int, foodId: ID!): Variant
  updateVariant(name: String, description: String, profile: String,  price: String, liters: Int, variantId: ID!): Variant
  deleteVariant(id: ID!): Variant!
  createOrder(delivery: String, time: Int, variant: ID!): Order
  orderStatus(status: String!, orderId: ID!): Order 
  payOrder(orderId: ID!): Order 
  completeOrder(orderId: ID!): Order 
  cancelOrder(orderId: ID!): Order
  createWallet(currency: String!, color: String!, name: String!): WalletResponse
  updateWallet(color: String, name: String, walletId: ID!): WalletResponse
  walletDeposit(accountId: String!, currency: String!, amount: Int, reference: String!): TransactionResponse
  walletWithdrawal(accountId: String!, currency: String!, amount: Int, reference: String!): TransactionResponse
  walletTransfer(accountId: String!, destionationAccountId: String!, amount: Int, reference: String!): TransactionResponse
  updateRefferal(userId: String!): UserResponse
  updatePassword(old: String!, new: String!): UserResponse
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  firstname: String
  lastname: String
  email: String!
  profile: String
  role: Role
  seller: Boolean
  links: [Link]
}

type UserResponse {
  error: String 
  user: User
}

type TransactionResponse {
  error: String 
  transaction: Transaction
}

type Transaction {
  id: ID! 
  operation: Operation
  amount: Int 
  balance: Int 
  accountNumber: String 
  name: String
}

type Category {
  id: ID!
  name: String
  description: String 
  profile: String
  food: [Food]
}

type Order {
  id: ID! 
  delivery: String 
  time: Int 
  status: Status
  postedBy: User 
  variant: Variant
}

type Wallet {
  id: ID! 
  color: String 
  balance: Float 
  currency: String 
  name: String
}

type WalletResponse {
  error: String 
  wallet: Wallet
}

type Location {
  id: ID! 
  country: String 
  city: String 
  currency: String
}

type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

type Food {
  id: ID! 
  name: String 
  description: String 
  profile: String 
  price: String 
  liters: Int
  category: Category 
  location: Location 
  postedBy: User
  variant: [Variant]
}

type Variant {
  id: ID! 
  name: String 
  description: String 
  profile: String 
  price: String 
  liters: Int
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

input LocationOrderByInput {
  country: Sort
  city: Sort
  currency: Sort
}

input FoodOrderByInput {
  name: Sort 
}

input CategoryOrderByInput {
  name: Sort
}

enum Sort {
  asc
  desc
}

enum Role {
  USER
  ADMIN
}

enum Status {
  UNPAID 
  PENDING 
  PROGRESS 
  COMPLETED 
  DELIVERED 
  CANCELLED
}

enum Operation {
  DEPOSIT 
  WITHDRWAL 
  TRANSFER
}